# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
    uploads_dir_name: 'uploads'
    uploads_base_url: '%env(SITE_BASE_URL)%/%uploads_dir_name%'
    site_base_url: '%env(SITE_BASE_URL)%'
    auth0_client_id: '%env(AUTH0_CLIENT_ID)%'
    auth0_client_secret: '%env(AUTH0_CLIENT_SECRET)%'
    auth0_domain: '%env(AUTH0_DOMAIN)%'
    auth0_connection: '%env(AUTH0_CONNECTION)%'
    auth0_audience: '%env(AUTH0_AUDIENCE)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
          $siteFromEmail: 'noreply@travishoglund.com'
          $uploadsPath: '%kernel.project_dir%/public/uploads'
          $privateUploadsPath: '%kernel.project_dir%/var/uploads'
          $publicUploadsFilesystem: '@oneup_flysystem.public_uploads_filesystem_filesystem'
          $privateUploadsFilesystem: '@oneup_flysystem.private_uploads_filesystem_filesystem'
          $tmpDirectoryFilesystem: '@oneup_flysystem.tmp_directory_filesystem_filesystem'
          $uploadedAssetsBaseUrl: '%uploads_base_url%'
          $projectDirectory: '%kernel.project_dir%'
          $siteBaseUrl: '%site_base_url%'
          $auth0ClientId: '%auth0_client_id%'
          $auth0ClientSecret: '%auth0_client_secret%'
          $auth0Domain: '%auth0_domain%'
          $auth0Connection: '%auth0_connection%'
          $auth0Audience: '%auth0_audience%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Exception,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EntityListener\PropertyListener:
        tags:
            - { name: doctrine.orm.entity_listener }

    App\EntityListener\WorkflowListener:
        tags:
            - { name: doctrine.orm.entity_listener }

    App\EntityListener\RecordListener:
        tags:
            - { name: doctrine.orm.entity_listener }

    App\EntityListener\CustomObjectListener:
      tags:
        - { name: doctrine.orm.entity_listener }

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
    App\EventListener\RequestListener:
      tags:
        - { name: kernel.event_listener, event: kernel.request }

    Symfony\Component\Asset\Context\RequestStackContext:
      alias: 'assets.context'
      public: true

    api_exception_subscriber:
      class: App\EventListener\ApiExceptionSubscriber
      arguments: []
      tags:
        - { name: kernel.event_subscriber }

    App\Service\ImageCacheGenerator:
      arguments:
        - "@liip_imagine.cache.manager"
        - "@liip_imagine.data.manager"
        - "@liip_imagine.filter.manager"
        - "@liip_imagine.filter.configuration"
        - "@logger"

    app.security.private_api_request_matcher: '@App\Security\PrivateApiRequestMatcher'
    app.security.main_request_matcher: '@App\Security\MainRequestMatcher'

    app.user_repository:
      class: Doctrine\ORM\EntityRepository
      factory: ["@doctrine.orm.entity_manager", getRepository]
      arguments:
        - App\Entity\User

    app.auth0_service:
      class: App\Security\Auth0Service

    app.jwt_user_provider:
      class: App\Security\User\JwtUserProvider
      arguments:
        - "@app.auth0_service"
        - "@app.user_repository"

    app.jwt_guard_authenticator:
      class: App\Security\JWTGuardAuthenticator
      arguments:
        - "@app.auth0_service"

    App\Routing\ApiLoader:
      tags: [routing.loader]